float x=0;
float y=0;
int i=0;
float preX=0;
float preY=0;

float x2=0;
float y2=0;
int j=0;
float preX2=0;
float preY2=0;

float x3=0;
float y3=0;
int k=0;
float preX3=0;
float preY3=0;

float x4=0;
float y4=0;
int m=0;
float preX4=0;
float preY4=0;

float x5=0;
float y5=0;
int n=0;
float preX5=0;
float preY5=0;


float[] emb8;
float[] emb16;
float[] emb32;
float[] emb64;
float[] emb100;


void setup()
{
  frameRate(30);
  size(1500,2500);
  background(255);
  
  emb8 = new float[50];
  emb16 = new float[50];
  emb32 = new float[50];
  emb64 = new float[50];
  emb100 = new float[50];
    
    emb8[0]=331;
emb8[1]=255;
emb8[2]=213;
emb8[3]=196;
emb8[4]=189;
emb8[5]=184;
emb8[6]=179;
emb8[7]=175;
emb8[8]=170;
emb8[9]=165;
emb8[10]=164;
emb8[11]=164;
emb8[12]=163;
emb8[13]=163;
emb8[14]=162;
emb8[15]=162;
emb8[16]=161;
emb8[17]=161;
emb8[18]=161;
emb8[19]=160;
emb8[20]=160;
emb8[21]=160;
emb8[22]=160;
emb8[23]=160;
emb8[24]=160;
emb8[25]=160;
emb8[26]=160;
emb8[27]=160;
emb8[28]=160;
emb8[29]=160;
emb8[30]=160;
emb8[31]=160;
emb8[32]=160;
emb8[33]=160;
emb8[34]=160;
emb8[35]=160;
emb8[36]=160;
emb8[37]=160;
emb8[38]=160;
emb8[39]=160;
emb8[40]=160;
emb8[41]=160;
emb8[42]=160;
emb8[43]=160;
emb8[44]=160;
emb8[45]=160;
emb8[46]=160;
emb8[47]=160;
emb8[48]=160;
emb8[49]=160;


emb16[0]=288;
emb16[1]=223;
emb16[2]=199;
emb16[3]=189;
emb16[4]=182;
emb16[5]=176;
emb16[6]=170;
emb16[7]=165;
emb16[8]=160;
emb16[9]=156;
emb16[10]=155;
emb16[11]=155;
emb16[12]=155;
emb16[13]=154;
emb16[14]=154;
emb16[15]=154;
emb16[16]=153;
emb16[17]=153;
emb16[18]=153;
emb16[19]=153;
emb16[20]=153;
emb16[21]=153;
emb16[22]=153;
emb16[23]=153;
emb16[24]=152;
emb16[25]=152;
emb16[26]=152;
emb16[27]=152;
emb16[28]=152;
emb16[29]=152;
emb16[30]=152;
emb16[31]=152;
emb16[32]=152;
emb16[33]=152;
emb16[34]=152;
emb16[35]=152;
emb16[36]=152;
emb16[37]=152;
emb16[38]=152;
emb16[39]=152;
emb16[40]=152;
emb16[41]=152;
emb16[42]=152;
emb16[43]=152;
emb16[44]=152;
emb16[45]=152;
emb16[46]=152;
emb16[47]=152;
emb16[48]=152;
emb16[49]=152;


emb32[0]=294;
emb32[1]=233;
emb32[2]=211;
emb32[3]=201;
emb32[4]=196;
emb32[5]=192;
emb32[6]=189;
emb32[7]=186;
emb32[8]=185;
emb32[9]=183;
emb32[10]=183;
emb32[11]=183;
emb32[12]=183;
emb32[13]=183;
emb32[14]=183;
emb32[15]=182;
emb32[16]=182;
emb32[17]=182;
emb32[18]=182;
emb32[19]=182;
emb32[20]=182;
emb32[21]=182;
emb32[22]=182;
emb32[23]=182;
emb32[24]=182;
emb32[25]=182;
emb32[26]=182;
emb32[27]=182;
emb32[28]=182;
emb32[29]=182;
emb32[30]=182;
emb32[31]=182;
emb32[32]=182;
emb32[33]=182;
emb32[34]=182;
emb32[35]=182;
emb32[36]=182;
emb32[37]=182;
emb32[38]=182;
emb32[39]=182;
emb32[40]=182;
emb32[41]=182;
emb32[42]=182;
emb32[43]=182;
emb32[44]=182;
emb32[45]=182;
emb32[46]=182;
emb32[47]=182;
emb32[48]=182;
emb32[49]=182;


emb64[0]=276;
emb64[1]=230;
emb64[2]=214;
emb64[3]=205;
emb64[4]=200;
emb64[5]=196;
emb64[6]=192;
emb64[7]=189;
emb64[8]=186;
emb64[9]=185;
emb64[10]=185;
emb64[11]=185;
emb64[12]=185;
emb64[13]=185;
emb64[14]=184;
emb64[15]=184;
emb64[16]=184;
emb64[17]=184;
emb64[18]=184;
emb64[19]=184;
emb64[20]=184;
emb64[21]=184;
emb64[22]=184;
emb64[23]=184;
emb64[24]=184;
emb64[25]=184;
emb64[26]=184;
emb64[27]=184;
emb64[28]=184;
emb64[29]=184;
emb64[30]=184;
emb64[31]=184;
emb64[32]=184;
emb64[33]=184;
emb64[34]=184;
emb64[35]=184;
emb64[36]=184;
emb64[37]=184;
emb64[38]=184;
emb64[39]=184;
emb64[40]=184;
emb64[41]=184;
emb64[42]=184;
emb64[43]=184;
emb64[44]=184;
emb64[45]=184;
emb64[46]=184;
emb64[47]=184;
emb64[48]=184;
emb64[49]=184;
 
 
 emb100[0]=273;
emb100[1]=238;
emb100[2]=224;
emb100[3]=217;
emb100[4]=211;
emb100[5]=207;
emb100[6]=204;
emb100[7]=201;
emb100[8]=198;
emb100[9]=195;
emb100[10]=195;
emb100[11]=195;
emb100[12]=195;
emb100[13]=195;
emb100[14]=195;
emb100[15]=194;
emb100[16]=194;
emb100[17]=194;
emb100[18]=194;
emb100[19]=194;
emb100[20]=194;
emb100[21]=194;
emb100[22]=194;
emb100[23]=194;
emb100[24]=194;
emb100[25]=194;
emb100[26]=194;
emb100[27]=194;
emb100[28]=194;
emb100[29]=193;
emb100[30]=193;
emb100[31]=193;
emb100[32]=193;
emb100[33]=193;
emb100[34]=193;
emb100[35]=193;
emb100[36]=193;
emb100[37]=193;
emb100[38]=193;
emb100[39]=193;
emb100[40]=193;
emb100[41]=193;
emb100[42]=193;
emb100[43]=193;
emb100[44]=193;
emb100[45]=193;
emb100[46]=193;
emb100[47]=193;
emb100[48]=193;
emb100[49]=193;
 
}

void draw()
{
  x = (i+1)*20;
  y = emb8[i+1]*3; 

  preX = i*20;
  preY = emb8[i]*3; 
  strokeWeight(2);
  stroke(159,201,60);
  line(preX,preY,x,y);

  preX = i*20;
  preY = emb8[i]*3;
  /*
  strokeWeight(2);
  stroke(0,0,0);
  point(x,y);*/
  if(i<48){
    i++;}
    
    //--------------------------------------------
    
    
    x2 = (j+1)*20;
  y2 = emb16[j+1]*3; 

  preX2 = j*20;
  preY2 = emb16[j]*3; 
  strokeWeight(2);
  stroke(61,183,204);
  line(preX2,preY2,x2,y2);

  preX2 = j*20;
  preY2 = emb16[j]*3;
  /*
  strokeWeight(2);
  stroke(0,0,0);
  point(x,y);*/
  if(j<48){
    j++;}
    
    //--------------------------------------------
    
    
    x3 = (k+1)*20;
  y3 = emb32[k+1]*3; 

  preX3 = k*20;
  preY3 = emb32[k]*3; 
  strokeWeight(2);
  stroke(70,65,217);
  line(preX3,preY3,x3,y3);

  preX3 = k*20;
  preY3 = emb32[k]*3;
  /*
  strokeWeight(2);
  stroke(0,0,0);
  point(x,y);*/
  if(k<48){
    k++;}
    
    
    //--------------------------------------------
    
    
    x4 = (m+1)*20;
  y4 = emb64[m+1]*3; 

  preX4 = m*20;
  preY4 = emb64[m]*3; 
  strokeWeight(2);
  stroke(153,0,133);
  line(preX4,preY4,x4,y4);

  preX4 = m*20;
  preY4 = emb64[m]*3;
  /*
  strokeWeight(2);
  stroke(0,0,0);
  point(x,y);*/
  if(m<48){
    m++;}
    
    
    //--------------------------------------------
    
    
    x5 = (n+1)*20;
  y5 = emb100[n+1]*3; 

  preX5 = n*20;
  preY5 = emb100[n]*3; 
  strokeWeight(2);
  stroke(189,92,36);
  line(preX5,preY5,x5,y5);

  preX5 = n*20;
  preY5 = emb100[n]*3;
  /*
  strokeWeight(2);
  stroke(0,0,0);
  point(x,y);*/
  if(n<48){
    n++;}
    
    
    
    
    
    
    
}








